## Manual de Uso B√°sico do github_upload.py

O **github_upload.py** √© um script que envia seu projeto diretamente para um reposit√≥rio no GitHub, automatizando os comandos Git mais comuns. Abaixo est√° um guia simples para iniciantes.

---

### 1. Pr√©-Requisitos
- **Python 3** instalado e dispon√≠vel no terminal.
- **Git** instalado e configurado (com git.exe ou bin√°rio no PATH).
- Acesso a um **reposit√≥rio do GitHub** (com URL).

---

### 2. Como Obter o Script
1. Fa√ßa o download do arquivo `github_upload.py` e coloque-o na **pasta raiz** do seu projeto.

---

### 3. Uso B√°sico
Existem duas formas principais de usar o script: **com argumentos** ou **de forma interativa**.

#### 3.1. Com Argumentos (R√°pido)

1. **Abra o terminal** na pasta do seu projeto.
2. Rode o comando abaixo, substituindo:
   - `URL_DO_REPOSITORIO` pela URL do seu reposit√≥rio GitHub.
   - `"Mensagem de commit"` pela mensagem que deseja usar no commit.

```bash
python github_upload.py URL_DO_REPOSITORIO "Mensagem de commit"
```

Exemplo:
```bash
python github_upload.py https://github.com/usuario/meu-projeto.git "Primeira vers√£o"
```

O script:
- Inicializa o reposit√≥rio (se necess√°rio)
- Conecta ao reposit√≥rio remoto no GitHub
- Adiciona todos os arquivos
- Faz commit com a mensagem fornecida
- Faz o push do c√≥digo para o GitHub

#### 3.2. Interativo (Passo a Passo)

1. **Abra o terminal** na pasta do seu projeto.
2. Digite:
   ```bash
   python github_upload.py
   ```
3. O script ir√° **perguntar** a URL do seu reposit√≥rio GitHub.  
   - Exemplo: `https://github.com/usuario/meu-projeto.git`
4. Opcionalmente, informe uma **mensagem de commit**.
   - Se voc√™ n√£o digitar nada, usar√° uma mensagem padr√£o.
5. O script far√° o resto (adicionar arquivos, fazer commit e push).

---

### 4. Mensagens e Autentica√ß√£o

- Se houver **problemas de autentica√ß√£o** (usu√°rio/senha ou token), o script perguntar√° se voc√™ deseja:
  - Inserir seu **token de acesso pessoal** (recomendado), **ou**
  - Tentar login interativo via terminal.

- Caso n√£o tenha um **Personal Access Token** (PAT), voc√™ pode criar um na sua conta GitHub (em *Settings ‚Üí Developer settings ‚Üí Personal Access Tokens*).

---

### 5. Observando o Resultado

- Se o **push** for bem-sucedido, voc√™ ver√° uma mensagem confirmando e o **link** do reposit√≥rio no final.
- Verifique no GitHub se seus arquivos foram realmente enviados.

---

### 6. Dicas Gerais

1. **Mantenha um .gitignore** para n√£o enviar arquivos desnecess√°rios (ex: logs, cache).
2. Se quiser mudar a **branch padr√£o** (entre ‚Äúmain‚Äù e ‚Äúmaster‚Äù), o script tenta detectar automaticamente qual est√° ativa.
3. Qualquer **conflito** ou **erro** ser√° exibido no terminal com instru√ß√µes para resolver (por exemplo, falha na autentica√ß√£o).

---

### 7. Exemplo R√°pido

1. Na pasta do seu projeto, rode:
   ```bash
   python github_upload.py https://github.com/usuario/novo-repo.git "Primeira vers√£o"
   ```
2. Caso seja a primeira vez, o script:
   - Inicia um reposit√≥rio Git local
   - Remove qualquer configura√ß√£o antiga de ‚Äòorigin‚Äô
   - Configura o novo endere√ßo remoto
   - Adiciona todos os arquivos ao *stage*
   - Cria um commit com a mensagem "Primeira vers√£o"
   - Faz *push* para o GitHub

No final, voc√™ deve ver no terminal algo como:
```
‚úÖ Push realizado com sucesso!
üåê Seu projeto foi enviado! Acesse: https://github.com/usuario/novo-repo
üéâ Processo conclu√≠do com sucesso!
```

---

Pronto! Agora seu projeto estar√° **versionado** e **acess√≠vel** no GitHub, tudo de forma simples e r√°pida.